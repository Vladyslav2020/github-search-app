{"version":3,"sources":["components/Header.tsx","redux/types.tsx","redux/actions.ts","components/SearchBar.tsx","components/RepoItem.tsx","components/ReposList.tsx","components/History.tsx","components/App.tsx","redux/repoListReducer.ts","redux/historyReducer.ts","redux/timerReducer.ts","redux/rootReducer.ts","index.tsx"],"names":["Header","className","src","alt","SET_REPO_LIST","ADD_ITEM_TO_HISTORY","SET_TIMER","setRepoList","data","type","payload","list","addItemToHistory","prepareRequest","searchValue","timer","dispatch","clearTimeout","newTimer","setTimeout","searchGithubUser","setTimer","name","a","fetch","response","json","items","repos_url","repos","map","item","title","language","description","html_url","console","log","message","SearchBar","useState","value","setValue","useDispatch","useSelector","state","onChange","event","target","RepoItem","props","href","ReposList","repoList","length","style","fontSize","color","fontWeight","marginTop","History","history","index","App","initialState","savedData","localStorage","getItem","parsedData","JSON","parse","rootReducer","combineReducers","action","obj","slice","setItem","stringify","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAiBeA,EAfU,WACrB,OACI,yBAAQC,UAAY,aAApB,UACI,sBAAKA,UAAY,WAAjB,UACI,qBAAKC,IAAI,mCAAmCC,IAAI,QAChD,sBAAKF,UAAY,aAAjB,UACI,mBAAGA,UAAY,QAAf,uBACA,mBAAGA,UAAY,UAAf,2CAGR,qBAAKA,UAAU,YAAf,yC,iCCZCG,EAAwB,gBACxBC,EAA8B,sBAE9BC,EAAoB,YCIpBC,EAA0D,SAACC,GACpE,MAAO,CACHC,KAAML,EACNM,QAAS,CACLC,KAAMH,EAAKG,QAKVC,EAAmB,SAACJ,GAC7B,MAAO,CACHC,KAAMJ,EACNK,QAASF,IAkBJK,EAAiB,SAACC,EAAqBC,GAChD,OAAO,SAACC,GAEJ,GADAC,aAAaF,EAAMA,OACdD,EAAL,CAGA,IAAII,EAAWC,YAAW,kBAAMH,EAASI,EAAiBN,MAAe,KAEzEE,EAfgB,SAACD,GACrB,MAAO,CACHN,KAAMH,EACNI,QAASK,GAYAM,CAASH,OAWbE,EAAmB,SAACE,GAC7B,8CAAO,WAAON,GAAP,mBAAAO,EAAA,sEAECP,EAASJ,EAAiBU,IAF3B,SAGsBE,MAAM,yCAAD,OAA0CF,EAA1C,gBAH3B,cAGKG,EAHL,gBAIkBA,EAASC,OAJ3B,cAIKlB,EAJL,iBAKkBgB,MAAMhB,EAAKmB,MAAM,GAAGC,WALtC,eAKCH,EALD,iBAMcA,EAASC,OANvB,QAMClB,EAND,OAOOqB,EAAQrB,EAAKsB,KAAI,SAACC,GAAD,MAAiC,CAACC,MAAOD,EAAKT,KAAMW,SAAUF,EAAKE,SAAUC,YAAaH,EAAKG,YAAahC,IAAK6B,EAAKI,aAC7InB,EAAST,EAAY,CAACI,KAAMkB,KAR7B,kDAUCO,QAAQC,IAAI,SAAU,KAAIC,SAV3B,0DAAP,uDCnCWC,EAjBG,WACd,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACM1B,EAAW2B,cACX5B,EAAQ6B,aAAkC,SAAAC,GAAK,OAAIA,EAAM9B,SAK/D,OACI,uBAAON,KAAO,OACPR,UAAY,aACZwC,MAASA,EACTK,SARW,SAACC,GACnBL,EAASK,EAAMC,OAAOP,OACtBzB,EAASH,EAAekC,EAAMC,OAAOP,MAAO1B,QCIrCkC,EAZyB,SAACC,GACrC,OACI,sBAAKjD,UAAY,YAAjB,UACI,qBAAKA,UAAU,aAAf,SACI,mBAAGkD,KAAQD,EAAMhD,IAAjB,SAAuBgD,EAAMlB,UAEjC,2CAAckB,EAAMjB,YACpB,8CAAiBiB,EAAMhB,mBCcpBkB,EAnBY,WACvB,IACMzC,EADWiC,aAA4C,SAACC,GAAD,OAAsBA,EAAMQ,SAAS1C,QAC5EmB,KAAI,SAAAC,GAAI,OAC1B,cAAC,EAAD,CAAUC,MAASD,EAAKC,MAEd9B,IAAO6B,EAAK7B,IACZ+B,SAAYF,EAAKE,SACjBC,YAAeH,EAAKG,aAHbH,EAAKC,UAM1B,OACI,sBAAK/B,UAAY,YAAjB,UACoB,GAAfU,EAAK2C,QACN,qBAAKC,MAAS,CAACC,SAAU,OAAQC,MAAO,QAASC,WAAY,OAAQC,UAAW,OAAhF,wBACChD,MCFEiD,EAbC,WACZ,IACMjD,EADUiC,aAAoC,SAAAC,GAAK,OAAIA,EAAMgB,WAC9ClD,KAAKmB,KAAI,SAACC,EAAM+B,GAAP,OAAiB,qBAAmB7D,UAAY,eAA/B,SAA+C8B,GAAnC+B,MAC3D,OACI,sBAAK7D,UAAY,UAAjB,UACI,qBAAKA,UAAY,gBAAjB,6BAGCU,MCUEoD,EAfO,WAClB,OACI,sBAAK9D,UAAY,MAAjB,UACI,cAAC,EAAD,IACA,sBAAKA,UAAY,WAAjB,UACI,sBAAKA,UAAY,WAAjB,UACI,cAAC,EAAD,IACA,cAAC,EAAD,OAEJ,cAAC,EAAD,W,eCZV+D,EAA6B,CAC/BrD,KAAM,ICDJsD,EAAYC,aAAaC,QAAQ,WACnCC,EAAiC,KACZ,kBAAdH,IACPG,EAAaC,KAAKC,MAAML,IAE5B,IAAMD,EAA4BI,GAAc,CAC5CzD,KAAM,ICNJqD,EAA0B,CAC5BjD,MAAO,GCAEwD,EAAcC,YAAgB,CAACnB,SHGsC,WAAgE,IAA/DR,EAA8D,uDAAtDmB,EAAcS,EAAwC,uCAC7I,OAAOA,EAAOhE,MACV,KAAKL,EAAe,OAAO,2BAAIyC,GAAX,IAAkBlC,KAAK,YAAK8D,EAAO/D,QAAQC,QAC/D,QAAS,OAAOkC,IGN+CgB,QFQG,WAA0D,IAAzDhB,EAAwD,uDAAhDmB,EAAcS,EAAkC,uCAC/H,OAAOA,EAAOhE,MACV,KAAKJ,EACD,IAAMqE,EAAM,CAAC/D,KAAK,CAAE8D,EAAO/D,SAAV,mBAAsBmC,EAAMlC,QAG7C,OAFA+D,EAAI/D,KAAO+D,EAAI/D,KAAKgE,MAAM,EAAG,GAC7BT,aAAaU,QAAQ,UAAWP,KAAKQ,UAAUH,IACxCA,EACX,QAAS,OAAO7B,IEfwE9B,MDG1B,WAA0D,IAAzD8B,EAAwD,uDAAhDmB,EAAcS,EAAkC,uCAC3H,OAAOA,EAAOhE,MACV,KAAKH,EAAW,MAAO,CAACS,MAAO0D,EAAO/D,SACtC,QAAS,OAAOmC,MEFlBiC,G,MAAQC,YAAYR,EAAaS,YAAgBC,OAEvDC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUN,MAASA,EAAnB,SACI,cAAC,EAAD,QAGRO,SAASC,eAAe,W","file":"static/js/main.ab6cae2d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header: React.FC = () => {\r\n    return(\r\n        <header className = 'app-header'>\r\n            <div className = 'app-logo'>\r\n                <img src=\"https://i.ibb.co/ZT4kM84/img.png\" alt=\"img\" />\r\n                <div className = \"logo-title\">\r\n                    <p className = 'title'>Requestum</p>\r\n                    <p className = 'caption'>web development company</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"app-title\">Github users search app</div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","export const SET_REPO_LIST: string = \"SET_REPO_LIST\";\r\nexport const ADD_ITEM_TO_HISTORY: string = \"ADD_ITEM_TO_HISTORY\";\r\nexport const SET_TIME_OF_LAST_INPUT: string = \"SET_TIME_OF_LAST_INPUT\";\r\nexport const SET_TIMER: string = \"SET_TIMER\";\r\n\r\n","import {\r\n    ADD_ITEM_TO_HISTORY,\r\n    SET_REPO_LIST, SET_TIME_OF_LAST_INPUT, SET_TIMER\r\n} from \"./types\"\r\nimport {ActionCreator, AnyAction, Dispatch} from \"redux\";\r\nimport {PayloadAction, RepoListType, TimerType} from \"../interfaces\";\r\n\r\nexport const setRepoList: ActionCreator<PayloadAction<RepoListType>> = (data: RepoListType) => {\r\n    return {\r\n        type: SET_REPO_LIST,\r\n        payload: {\r\n            list: data.list\r\n        }\r\n    };\r\n}\r\n\r\nexport const addItemToHistory = (data: string) => {\r\n    return {\r\n        type: ADD_ITEM_TO_HISTORY,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const setTimeOfLastInput = (time: number) => {\r\n    return {\r\n        type: SET_TIME_OF_LAST_INPUT,\r\n        payload: time\r\n    }\r\n}\r\n\r\nexport const setTimer = (timer: number) => {\r\n    return {\r\n        type: SET_TIMER,\r\n        payload: timer\r\n    }\r\n}\r\n\r\nexport const prepareRequest = (searchValue: string, timer: TimerType) => {\r\n    return (dispatch: Dispatch<AnyAction>) => {\r\n        clearTimeout(timer.timer);\r\n        if (!searchValue)\r\n            return;\r\n        // @ts-ignore\r\n        let newTimer = setTimeout(() => dispatch(searchGithubUser(searchValue)), 500);\r\n        // @ts-ignore\r\n        dispatch(setTimer(newTimer));\r\n    }\r\n}\r\n\r\ninterface ResponseDataItemType{\r\n    name: string;\r\n    language: string;\r\n    description: string;\r\n    html_url: string;\r\n}\r\n\r\nexport const searchGithubUser = (name: string) => {\r\n    return async (dispatch: Dispatch<AnyAction>) => {\r\n        try {\r\n            dispatch(addItemToHistory(name));\r\n            let response = await fetch(`https://api.github.com/search/users?q=${name}&per_page=1`);\r\n            let data = await response.json();\r\n            response = await fetch(data.items[0].repos_url);\r\n            data = await response.json();\r\n            const repos = data.map((item: ResponseDataItemType) => ({title: item.name, language: item.language, description: item.description, src: item.html_url}));\r\n            dispatch(setRepoList({list: repos}));\r\n        } catch (err) {\r\n            console.log(\"Error:\", err.message);\r\n        }\r\n    }\r\n}\r\n","import React, {useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {prepareRequest} from \"../redux/actions\";\r\nimport {StateType, TimerType} from \"../interfaces\";\r\n\r\nconst SearchBar = () => {\r\n    const [value, setValue] = useState(\"\");\r\n    const dispatch = useDispatch();\r\n    const timer = useSelector<StateType, TimerType>(state => state.timer);\r\n    const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setValue(event.target.value);\r\n        dispatch(prepareRequest(event.target.value, timer));\r\n    }\r\n    return (\r\n        <input type = 'text'\r\n               className = 'search-bar'\r\n               value = {value}\r\n               onChange = {changeHandler}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\nimport {RepoItemType} from \"../interfaces\";\r\n\r\nconst RepoItem:React.FC<RepoItemType> = (props) => {\r\n    return (\r\n        <div className = 'repo-item'>\r\n            <div className=\"repo-title\">\r\n                <a href = {props.src}>{props.title}</a>\r\n            </div>\r\n            <p>Language: {props.language}</p>\r\n            <p>Description: {props.description}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RepoItem;\r\n","import React from 'react';\r\nimport {RepoItemType, StateType} from \"../interfaces\";\r\nimport RepoItem from \"./RepoItem\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\nconst ReposList:React.FC = () => {\r\n    const repoList = useSelector<StateType, Array<RepoItemType>>((state: StateType) => state.repoList.list)\r\n    const list = repoList.map(item =>\r\n        <RepoItem title = {item.title}\r\n                  key = {item.title}\r\n                  src = {item.src}\r\n                  language = {item.language}\r\n                  description = {item.description}\r\n        />\r\n    );\r\n    return (\r\n        <div className = 'repo-list'>\r\n            {list.length == 0 &&\r\n            <div style = {{fontSize: '20px', color: 'white', fontWeight: 'bold', marginTop: '5px'}}>No results</div>}\r\n            {list}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReposList;\r\n","import React from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport {HistoryType, StateType} from \"../interfaces\";\r\n\r\nconst History = () => {\r\n    const history = useSelector<StateType, HistoryType>(state => state.history);\r\n    const list = history.list.map((item, index) => <div key = {index} className = 'history-item'>{item}</div>)\r\n    return (\r\n        <div className = 'history'>\r\n            <div className = 'history-title'>\r\n                Search history:\r\n            </div>\r\n            {list}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default History;\r\n","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport RepoItem from \"./RepoItem\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport ReposList from \"./ReposList\";\r\nimport History from \"./History\";\r\n\r\nconst App: React.FC = () => {\r\n    return (\r\n        <div className = 'app'>\r\n            <Header />\r\n            <div className = 'app-body'>\r\n                <div className = 'side-bar'>\r\n                    <SearchBar />\r\n                    <History />\r\n                </div>\r\n                <ReposList />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { Reducer } from \"react\";\r\nimport {SET_REPO_LIST} from \"./types\";\r\nimport {PayloadAction, RepoItemType, RepoListType} from \"../interfaces\";\r\n\r\nconst initialState: RepoListType = {\r\n    list: []\r\n};\r\n\r\nexport const repoListReducer:Reducer<RepoListType, PayloadAction<RepoListType>> = (state = initialState, action: PayloadAction<RepoListType>) => {\r\n    switch(action.type){\r\n        case SET_REPO_LIST: return {...state, list: [...action.payload.list]};\r\n        default: return state;\r\n    }\r\n}\r\n","import { Reducer } from \"react\";\r\nimport {ADD_ITEM_TO_HISTORY} from \"./types\";\r\nimport {HistoryType, PayloadAction, RepoListType} from \"../interfaces\";\r\n\r\nconst savedData = localStorage.getItem('history');\r\nlet parsedData: HistoryType | null = null;\r\nif (typeof savedData === 'string'){\r\n    parsedData = JSON.parse(savedData);\r\n}\r\nconst initialState: HistoryType = parsedData || {\r\n    list: []\r\n};\r\n\r\nexport const historyReducer:Reducer<HistoryType, PayloadAction<string>> = (state = initialState, action: PayloadAction<string>) => {\r\n    switch(action.type){\r\n        case ADD_ITEM_TO_HISTORY:\r\n            const obj = {list: [action.payload, ...state.list]};\r\n            obj.list = obj.list.slice(0, 5);\r\n            localStorage.setItem('history', JSON.stringify(obj));\r\n            return obj;\r\n        default: return state;\r\n    }\r\n}\r\n","import { Reducer } from \"react\";\r\nimport {SET_TIMER} from \"./types\";\r\nimport {PayloadAction, TimerType} from \"../interfaces\";\r\n\r\nconst initialState: TimerType = {\r\n    timer: 0\r\n};\r\n\r\nexport const timerReducer:Reducer<TimerType, PayloadAction<number>> = (state = initialState, action: PayloadAction<number>) => {\r\n    switch(action.type){\r\n        case SET_TIMER: return {timer: action.payload}\r\n        default: return state;\r\n    }\r\n}\r\n","import {combineReducers} from 'redux';\r\nimport {repoListReducer} from \"./repoListReducer\";\r\nimport {historyReducer} from \"./historyReducer\";\r\nimport {timerReducer} from \"./timerReducer\";\r\n\r\nexport const rootReducer = combineReducers({repoList: repoListReducer, history: historyReducer, timer: timerReducer});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {applyMiddleware, createStore} from 'redux';\nimport {Provider} from \"react-redux\";\nimport thunk from 'redux-thunk';\nimport App from './components/App';\nimport {rootReducer} from \"./redux/rootReducer\";\nimport './index.css';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store = {store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}